"""create evolution chain and item

Revision ID: afa68bbf4bf5
Revises: 637965b01865
Create Date: 2025-04-23 12:20:35.321664

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'afa68bbf4bf5'
down_revision: Union[str, None] = '637965b01865'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    item_fling_effects = op.create_table('item_fling_effects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('identifier', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identifier')
    )
    item_pockets = op.create_table('item_pockets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('identifier', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identifier')
    )
    item_categories = op.create_table('item_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pocket_id', sa.Integer(), nullable=False),
    sa.Column('identifier', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['pocket_id'], ['item_pockets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identifier')
    )
    item_fling_effect_prose = op.create_table('item_fling_effect_prose',
    sa.Column('item_fling_effect_id', sa.Integer(), nullable=False),
    sa.Column('local_language_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['item_fling_effect_id'], ['item_fling_effects.id'], ),
    sa.ForeignKeyConstraint(['local_language_id'], ['languages.id'], ),
    sa.PrimaryKeyConstraint('item_fling_effect_id', 'local_language_id')
    )
    item_pocket_names = op.create_table('item_pocket_names',
    sa.Column('item_pocket_id', sa.Integer(), nullable=False),
    sa.Column('local_language_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['item_pocket_id'], ['item_pockets.id'], ),
    sa.ForeignKeyConstraint(['local_language_id'], ['languages.id'], ),
    sa.PrimaryKeyConstraint('item_pocket_id', 'local_language_id')
    )
    items = op.create_table('items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('identifier', sa.String(length=50), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Integer(), nullable=False),
    sa.Column('fling_power', sa.Integer(), nullable=True),
    sa.Column('fling_effect_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['item_categories.id'], ),
    sa.ForeignKeyConstraint(['fling_effect_id'], ['item_fling_effects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    evolution_chains = op.create_table('evolution_chains',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('baby_trigger_item_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['baby_trigger_item_id'], ['items.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    item_names = op.create_table('item_names',
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('local_language_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['local_language_id'], ['languages.id'], ),
    sa.PrimaryKeyConstraint('item_id', 'local_language_id')
    )

    from migration.tool import load_csv

    with load_csv("item_fling_effects") as csv_data:
        # id,identifier
        data = [
            {
                "id": int(row["id"]),
                "identifier": row["identifier"]
            }
            for row in csv_data
        ]
        op.bulk_insert(item_fling_effects, data)

    with load_csv("item_pockets") as csv_data:
        # id,identifier
        data = [
            {
                "id": int(row["id"]),
                "identifier": row["identifier"]
            }
            for row in csv_data
        ]
        op.bulk_insert(item_pockets, data)

    with load_csv("item_categories") as csv_data:
        # id,pocket_id,identifier
        data = [
            {
                "id": int(row["id"]),
                "pocket_id": int(row["pocket_id"]),
                "identifier": row["identifier"]
            }
            for row in csv_data
        ]
        op.bulk_insert(item_categories, data)

    with load_csv("item_fling_effect_prose") as csv_data:
        # item_fling_effect_id,local_language_id,effect
        data = [
            {
                "item_fling_effect_id": int(row["item_fling_effect_id"]),
                "local_language_id": int(row["local_language_id"]),
                "name": row["effect"]
            }
            for row in csv_data
        ]
        op.bulk_insert(item_fling_effect_prose, data)

    with load_csv("item_pocket_names") as csv_data:
        # item_pocket_id,local_language_id,name
        data = [
            {
                "item_pocket_id": int(row["item_pocket_id"]),
                "local_language_id": int(row["local_language_id"]),
                "name": row["name"]
            }
            for row in csv_data
        ]
        op.bulk_insert(item_pocket_names, data)

    with load_csv("items") as csv_data:
        # id,identifier,category_id,cost,fling_power,fling_effect_id
        data = [
            {
                "id": int(row["id"]),
                "identifier": row["identifier"],
                "category_id": int(row["category_id"]),
                "cost": int(row["cost"]),
                "fling_power": int(row["fling_power"]) if row["fling_power"] else None,
                "fling_effect_id": int(row["fling_effect_id"]) if row["fling_effect_id"] else None
            }
            for row in csv_data
        ]
        op.bulk_insert(items, data)

    with load_csv("evolution_chains") as csv_data:
        # id,baby_trigger_item_id
        data = [
            {
                "id": int(row["id"]),
                "baby_trigger_item_id": int(row["baby_trigger_item_id"]) if row["baby_trigger_item_id"] else None
            }
            for row in csv_data
        ]
        op.bulk_insert(evolution_chains, data)

    with load_csv("item_names") as csv_data:
        # item_id,local_language_id,name
        data = [
            {
                "item_id": int(row["item_id"]),
                "local_language_id": int(row["local_language_id"]),
                "name": row["name"]
            }
            for row in csv_data
        ]
        op.bulk_insert(item_names, data)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('item_names')
    op.drop_table('evolution_chains')
    op.drop_table('items')
    op.drop_table('item_pocket_names')
    op.drop_table('item_fling_effect_prose')
    op.drop_table('item_categories')
    op.drop_table('item_pockets')
    op.drop_table('item_fling_effects')
    # ### end Alembic commands ###
