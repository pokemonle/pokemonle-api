"""create pokemon evolution

Revision ID: db557f2347d7
Revises: d8cc0971d5af
Create Date: 2025-04-24 14:27:30.029178

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'db557f2347d7'
down_revision: Union[str, None] = 'd8cc0971d5af'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    evolution_triggers = op.create_table('evolution_triggers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('identifier', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identifier')
    )
    evolution_trigger_prose = op.create_table('evolution_trigger_prose',
    sa.Column('evolution_trigger_id', sa.Integer(), nullable=False),
    sa.Column('local_language_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['evolution_trigger_id'], ['evolution_triggers.id'], ),
    sa.ForeignKeyConstraint(['local_language_id'], ['languages.id'], ),
    sa.PrimaryKeyConstraint('evolution_trigger_id', 'local_language_id')
    )
    pokemon_evolution = op.create_table('pokemon_evolution',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('evolved_species_id', sa.Integer(), nullable=False),
    sa.Column('evolution_trigger_id', sa.Integer(), nullable=False),
    sa.Column('trigger_item_id', sa.Integer(), nullable=True),
    sa.Column('minimum_level', sa.Integer(), nullable=True),
    sa.Column('gender_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('held_item_id', sa.Integer(), nullable=True),
    sa.Column('time_of_day', sa.String(length=10), nullable=True),
    sa.Column('known_move_id', sa.Integer(), nullable=True),
    sa.Column('known_move_type_id', sa.Integer(), nullable=True),
    sa.Column('minimum_happiness', sa.Integer(), nullable=True),
    sa.Column('minimum_beauty', sa.Integer(), nullable=True),
    sa.Column('minimum_affection', sa.Integer(), nullable=True),
    sa.Column('relative_physical_stats', sa.Integer(), nullable=True),
    sa.Column('party_species_id', sa.Integer(), nullable=True),
    sa.Column('party_type_id', sa.Integer(), nullable=True),
    sa.Column('trade_species_id', sa.Integer(), nullable=True),
    sa.Column('needs_overworld_rain', sa.Boolean(), nullable=True),
    sa.Column('turn_upside_down', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['evolution_trigger_id'], ['evolution_triggers.id'], ),
    sa.ForeignKeyConstraint(['evolved_species_id'], ['pokemon_species.id'], ),
    sa.ForeignKeyConstraint(['held_item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['party_species_id'], ['pokemon_species.id'], ),
    sa.ForeignKeyConstraint(['party_type_id'], ['types.id'], ),
    sa.ForeignKeyConstraint(['trade_species_id'], ['pokemon_species.id'], ),
    sa.ForeignKeyConstraint(['trigger_item_id'], ['items.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    from migration.tool import load_csv

    with load_csv("evolution_triggers") as csv_data:
        # id,identifier
        data = [
            {
                "id": int(row["id"]),
                "identifier": row["identifier"]
            }
            for row in csv_data
        ]
        op.bulk_insert(evolution_triggers, data)

    with load_csv("evolution_trigger_prose") as csv_data:
        # evolution_trigger_id,local_language_id,name
        data = [
            {
                "evolution_trigger_id": int(row["evolution_trigger_id"]),
                "local_language_id": int(row["local_language_id"]),
                "name": row["name"]
            }
            for row in csv_data
        ]
        op.bulk_insert(evolution_trigger_prose, data)

    with load_csv("pokemon_evolution") as csv_data:
        data = [
            {
                # id,evolved_species_id,evolution_trigger_id,trigger_item_id,minimum_level,gender_id
                "id": int(row["id"]),
                "evolved_species_id": int(row["evolved_species_id"]),
                "evolution_trigger_id": int(row["evolution_trigger_id"]),
                "trigger_item_id": int(row["trigger_item_id"]) if row["trigger_item_id"] else None,
                "minimum_level": int(row["minimum_level"]) if row["minimum_level"] else None,
                "gender_id": int(row["gender_id"]) if row["gender_id"] else None,
                # location_id,held_item_id,time_of_day,known_move_id,known_move_type_id,minimum_happiness,minimum_beauty
                "location_id": int(row["location_id"]) if row["location_id"] else None,
                "held_item_id": int(row["held_item_id"]) if row["held_item_id"] else None,
                "time_of_day": row["time_of_day"],
                "known_move_id": int(row["known_move_id"]) if row["known_move_id"] else None,
                "known_move_type_id": int(row["known_move_type_id"]) if row["known_move_type_id"] else None,
                "minimum_happiness": int(row["minimum_happiness"]) if row["minimum_happiness"] else None,
                "minimum_beauty": int(row["minimum_beauty"]) if row["minimum_beauty"] else None,
                # minimum_affection,relative_physical_stats,party_species_id,party_type_id,trade_species_id,needs_overworld_rain,turn_upside_down
                "minimum_affection": int(row["minimum_affection"]) if row["minimum_affection"] else None,
                "relative_physical_stats": int(row["relative_physical_stats"]) if row["relative_physical_stats"] else None,
                "party_species_id": int(row["party_species_id"]) if row["party_species_id"] else None,
                "party_type_id": int(row["party_type_id"]) if row["party_type_id"] else None,
                "trade_species_id": int(row["trade_species_id"]) if row["trade_species_id"] else None,
                "needs_overworld_rain": bool(row["needs_overworld_rain"]),
                "turn_upside_down": bool(row["turn_upside_down"]),

            }
            for row in csv_data
        ]
        op.bulk_insert(pokemon_evolution, data)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pokemon_evolution')
    op.drop_table('evolution_trigger_prose')
    op.drop_table('evolution_triggers')
    # ### end Alembic commands ###
